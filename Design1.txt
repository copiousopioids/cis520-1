
CIS 520 - Programming Project #1


---- GROUP ----

>> Fill in the names and email addresses of your group members.

Zakary 	Kedrovsky 	<alexkedro@ksu.edu>
Brent 	Krull		<bkrull@ksu.edu>
Zachary Marcolesco	<zmarcolesco@ksu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

[1] - http://stuartharrell.com/blog/2016/12/16/efficient-alarm-clock/


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    thread.h:
     - Add "int64_t sleeping_ticks;" to the thread structure 
        Add this struct member to keep track of how long the thread is supposed to sleep.
        
    thread.c
     - Add "static struct list sleeping_list;"
        Create this list to keep track of sleeping threads.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
    
    If "ticks" is valid then "timer_sleep_until()" is called which sets the "sleeping_ticks"
     of the thread and adds it to the "sleeping_list". In the timer interrupt handler we check
     if any threads are ready to be woken up after ticks has been incremented.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

    Time spent in the interrupt handler is minimized by keeping the list of sleeping threads
     sorted so that time spent in the list is O(1) instead of O(n).

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
   
    Interrupts are disabled when accessing the list of sleeping threads and scheduling other 
     threads. This makes the process of putting the thread to sleep atomic, thus avoiding race 
     conditions.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
    
    As mentioned in A4, interrupts are disabled when accessing the list of sleeping threads 
     and scheduling other threads. This means that the interrupt essentially does not occur 
     until the thread is done being put to sleep.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

    We initially called try_wake_up_sleeping_threads() in thread_tick() (in thread.c), but 
     decided that it would be more efficient to call this in timer.c. Due to this we were 
     able to avoid including timer.h in thread.c.
    
    We chose this design before we understood the purpose of semaphores and we execute 
     essentially identical logic of what semaphores do (sema_down() blocks a thread and 
     sema_up() unblocks a thread). We plan to revisit this part of our solution when we
     have finished the other parts of the project.
    
    We used [1] as a starting point which showed us that a sorted list was good (see A3). 
     It also gave us a general direction to begin working on the project (i.e. what files 
     we need to be looking at, what steps should go into putting a thread to sleep/waking 
     it up).

     
     
             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread structure:
    /* Priority Scheduling */
    int initial_priority;               - Save the priority assigned to this thread.
    struct lock *wait_on_lock;          - Pointer to a lock this thread is waiting on.
    struct list donations;              - List of priorities that have been donated from threads waiting on your lock. 
    struct list_elem donation_elem;     - List element to put in another threads donations list.
    
>> B2: Explain the data structure used to track priority donation.

    The "list donations" and "list_elem donation_elem" data structures 
     are used in the thread struct to track priority donation. The list
     keeps track of any other threads that have been donated to this thread.
     The list_elem is used to insert this thread into another thread's donation
     list to donated its priority.
     
    A thread's "assigned" priority is stored in the 'initial_priority' variable, 
     and its current or "effective" priority is stored in the 'priority' variable.
     
    The lock a thread is waiting on is saved in the wait_on_lock pointer. This is 
     set when a thread donates its priority.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

    Whenever a thread is put to sleep it is added to a list of waiters for
     the semaphore's lock. This list is sorted by priority so that the head of
     the list is always the greatest priority in the list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
    
    When lock_acquire() is called and the lock is held, wait_on_lock on the current thread 
     is set to the desired lock. Then add the current thread to holder's donation list. 
     Then, the current thread "downs" the lock's semaphore. Here the current thread will call 
     "priority_donation_with_limit()" which will set the holding thread's priority to the highest 
     priority in its donation list, up to 8 levels deep. 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

    When lock_release() is called, all donators waiting on that lock are
     removed from the current thread's donor list. The current thread then 
     refreshes its priority so that it is not using any donated priority. 
     Then the lock's semaphore is "upped", which will sort the locks waiters, 
     according to priority, and pop off the head of the list, which will be the 
     waiter with the highest priority. The current thread will then check if it 
     should yield to a higher priority thread that is ready to run.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

    A potential race condition in thread_set_priority() could be when two processes
     call a threads thread_set_priority() function. We avoid this by disabling 
     interrupts to achieve atomicity when changing a threads assigned priority.
     
    Locks could be used in this case if there was a lock assigned to each thread
     and it had to be acquired prior to changing the thread's priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    We again decided to keep sorted lists to avoid time looking through this list;
     however, we do often sort these lists to ensure correctness, and this should only 
     ever take O(n) time. We also decided to disable interrupts instead of using locks 
     when editing a thread's priority, because thought that adding more complexity to 
     the project was a bad idea. Finally, we include a few lines that sort the lists 
     before looking through them, which may be redundant, but we decided that the added 
     redundancy would be worth the guaranteed correctness.


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
